name: Build Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      - name: Download latest sing-box binary
        shell: bash
        run: |
          VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | grep '"tag_name":' | cut -d '"' -f4)
          FILE="sing-box-${VERSION#v}-windows-amd64.exe"
          URL="https://github.com/SagerNet/sing-box/releases/download/${VERSION}/${FILE}"
          echo "Creating directory vpn_client/sing-box..."
          mkdir -p vpn_client/sing-box
          echo "Downloading sing-box from: $URL"
          curl -L "$URL" -o "vpn_client/sing-box/sing-box.exe"
          echo "Download completed. File size:"
          ls -la vpn_client/sing-box/sing-box.exe

      - name: Download Wintun DLL
        shell: bash
        run: |
          echo "Downloading Wintun DLL..."
          curl -L "https://www.wintun.net/builds/wintun-0.14.1.zip" -o wintun.zip
          echo "Extracting Wintun..."
          unzip -q wintun.zip
          echo "Creating directory vpn_client/sing-box (if not exists)..."
          mkdir -p vpn_client/sing-box
          echo "Copying wintun.dll..."
          cp wintun/bin/amd64/wintun.dll vpn_client/sing-box/wintun.dll
          echo "Cleaning up..."
          rm -rf wintun.zip wintun
          echo "Wintun download completed. File size:"
          ls -la vpn_client/sing-box/wintun.dll

      - name: Install dependencies
        run: flutter pub get
        working-directory: vpn_client

      - name: Add Windows platform
        shell: bash
        run: |
          echo "=== ENSURING WINDOWS PLATFORM ==="
          echo "Checking Windows platform..."
          if [ ! -f "windows/CMakeLists.txt" ] || [ ! -d "windows/runner" ]; then
            echo "Windows platform incomplete, creating..."
            flutter create --platforms=windows .
          else
            echo "Windows platform exists, updating..."
            flutter create --platforms=windows .
          fi
          echo "Windows platform ready:"
          ls -la windows/
        working-directory: vpn_client

      - name: Build Flutter app (Windows)
        shell: bash
        run: |
          echo "=== BUILDING FLUTTER WINDOWS APP ==="
          echo "Flutter version:"
          flutter --version
          echo "Building Windows release..."
          flutter build windows --release --verbose
          echo "Build completed. Checking output..."
          if [ -d "build/windows/runner/Release" ]; then
            echo "✓ Release directory exists"
            ls -la build/windows/runner/Release/
            if [ -f "build/windows/runner/Release/vpn_client.exe" ]; then
              echo "✓ vpn_client.exe created successfully!"
              ls -lh build/windows/runner/Release/vpn_client.exe
            else
              echo "✗ ERROR: vpn_client.exe not found!"
              echo "Contents of Release directory:"
              find build/windows/runner/Release/ -type f || echo "Directory empty or missing"
              exit 1
            fi
          else
            echo "✗ ERROR: Release directory not created!"
            echo "Build directory contents:"
            find build/ -type f || echo "Build directory empty or missing"
            exit 1
          fi
        working-directory: vpn_client

      - name: Verify build output and create directories
        shell: bash
        working-directory: vpn_client
        run: |
          echo "=== DIAGNOSTIC INFO ==="
          echo "Current directory:"
          pwd
          echo "Listing current directory:"
          ls -la
          echo "Checking if build directory exists:"
          if [ -d "build" ]; then
            echo "build directory exists"
            ls -la build/
            if [ -d "build/windows" ]; then
              echo "build/windows directory exists"
              ls -la build/windows/
              if [ -d "build/windows/runner" ]; then
                echo "build/windows/runner directory exists"
                ls -la build/windows/runner/
              else
                echo "build/windows/runner directory DOES NOT exist"
              fi
            else
              echo "build/windows directory DOES NOT exist"
            fi
          else
            echo "build directory DOES NOT exist"
          fi
          echo "Checking sing-box directory:"
          if [ -d "sing-box" ]; then
            echo "sing-box directory exists"
            ls -la sing-box/
          else
            echo "sing-box directory DOES NOT exist"
            ls -la
          fi

      - name: Copy dependencies to release folder
        shell: bash
        working-directory: vpn_client
        run: |
          echo "=== COPYING DEPENDENCIES ==="
          echo "Creating full directory structure..."
          mkdir -p build/windows/runner/Release
          
          echo "Verifying Release directory was created:"
          if [ -d "build/windows/runner/Release" ]; then
            echo "SUCCESS: Release directory exists"
            ls -la build/windows/runner/Release/
          else
            echo "ERROR: Failed to create Release directory"
            exit 1
          fi
          
          echo "Copying sing-box.exe..."
          if [ -f "sing-box/sing-box.exe" ]; then
            echo "Source file exists, copying..."
            cp -v sing-box/sing-box.exe build/windows/runner/Release/sing-box.exe
            if [ $? -eq 0 ]; then
              echo "SUCCESS: Copied sing-box.exe"
              ls -la build/windows/runner/Release/sing-box.exe
            else
              echo "ERROR: Failed to copy sing-box.exe, error code: $?"
              exit 1
            fi
          else
            echo "ERROR: sing-box.exe not found"
            echo "Contents of sing-box directory:"
            if [ -d "sing-box" ]; then
              ls -la sing-box/
            else
              echo "sing-box directory does not exist"
            fi
            exit 1
          fi
          
          echo "Copying wintun.dll..."
          if [ -f "sing-box/wintun.dll" ]; then
            echo "Source file exists, copying..."
            cp -v sing-box/wintun.dll build/windows/runner/Release/wintun.dll
            if [ $? -eq 0 ]; then
              echo "SUCCESS: Copied wintun.dll"
              ls -la build/windows/runner/Release/wintun.dll
            else
              echo "ERROR: Failed to copy wintun.dll, error code: $?"
              exit 1
            fi
          else
            echo "WARNING: wintun.dll not found"
            echo "Contents of sing-box directory:"
            ls -la sing-box/
          fi
          
          echo "Final verification - Release directory contents:"
          if [ -d "build/windows/runner/Release" ]; then
            ls -la build/windows/runner/Release/
          else
            echo "ERROR: Release directory does not exist after copy operations!"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vpn-client-windows
          path: vpn_client/build/windows/runner/Release
