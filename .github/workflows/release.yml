name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Install dependencies
      run: |
        cd vpn_client
        flutter pub get

    - name: Download sing-box and Wintun
      shell: bash
      run: |
        # Download sing-box
        VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | grep '"tag_name":' | cut -d '"' -f4)
        FILE="sing-box-${VERSION#v}-windows-amd64.exe"
        URL="https://github.com/SagerNet/sing-box/releases/download/${VERSION}/${FILE}"
        echo "Creating directory vpn_client/sing-box..."
        mkdir -p vpn_client/sing-box
        echo "Downloading sing-box from: $URL"
        curl -L "$URL" -o "vpn_client/sing-box/sing-box.exe"
        echo "Sing-box download completed. File size:"
        ls -la vpn_client/sing-box/sing-box.exe
        
        # Download Wintun
        echo "Downloading Wintun DLL..."
        curl -L "https://www.wintun.net/builds/wintun-0.14.1.zip" -o wintun.zip
        echo "Extracting Wintun..."
        unzip -q wintun.zip
        echo "Copying wintun.dll..."
        cp wintun/bin/amd64/wintun.dll vpn_client/sing-box/wintun.dll
        echo "Cleaning up..."
        rm -rf wintun.zip wintun
        echo "Wintun download completed. File size:"
        ls -la vpn_client/sing-box/wintun.dll
        rm -rf wintun.zip wintun
    
    - name: Run tests
      run: |
        cd vpn_client
        flutter test
    
    - name: Build Windows release
      run: |
        cd vpn_client
        flutter build windows --release
        
    - name: Verify build output and create directories
      shell: cmd
      run: |
        cd vpn_client
        echo "=== RELEASE BUILD DIAGNOSTIC ==="
        echo "Current directory:"
        cd
        echo "Listing vpn_client directory:"
        dir
        echo "Checking build structure:"
        if exist build\ (
          echo "build\ exists"
          dir build
          if exist build\windows\ (
            echo "build\windows\ exists"  
            if exist build\windows\runner\ (
              echo "build\windows\runner\ exists"
              dir build\windows\runner
            )
          )
        )
        echo "Checking dependencies:"
        if exist sing-box\ (
          echo "sing-box\ directory exists"
          dir sing-box
        )
        
    - name: Copy dependencies to release folder
      shell: cmd
      run: |
        cd vpn_client
        echo "=== COPYING DEPENDENCIES FOR RELEASE ==="
        echo "Creating complete directory structure..."
        if not exist build\ mkdir build
        if not exist build\windows\ mkdir build\windows  
        if not exist build\windows\runner\ mkdir build\windows\runner
        if not exist build\windows\runner\Release\ mkdir build\windows\runner\Release
        
        echo "Verifying directory creation:"
        if exist build\windows\runner\Release\ (
          echo "SUCCESS: Release directory created"
        ) else (
          echo "ERROR: Failed to create Release directory"
          exit 1
        )
        
        echo "Copying sing-box.exe..."
        if exist sing-box\sing-box.exe (
          echo "Copying sing-box.exe..."
          copy /Y sing-box\sing-box.exe build\windows\runner\Release\sing-box.exe
          if %ERRORLEVEL% EQU 0 (
            echo "SUCCESS: sing-box.exe copied"
          ) else (
            echo "ERROR: Failed to copy sing-box.exe"
            exit 1
          )
        ) else (
          echo "ERROR: sing-box.exe not found"
          if exist sing-box\ (
            dir sing-box
          ) else (
            echo "sing-box directory missing"
          )
          exit 1
        )
        
        echo "Copying wintun.dll..."
        if exist sing-box\wintun.dll (
          echo "Copying wintun.dll..."
          copy /Y sing-box\wintun.dll build\windows\runner\Release\wintun.dll
          if %ERRORLEVEL% EQU 0 (
            echo "SUCCESS: wintun.dll copied"
          ) else (
            echo "ERROR: Failed to copy wintun.dll"
            exit 1
          )
        ) else (
          echo "ERROR: wintun.dll not found"
          if exist sing-box\ (
            dir sing-box
          )
          exit 1
        )
        
        echo "Final verification:"
        if exist build\windows\runner\Release\ (
          echo "Release directory contents:"
          dir build\windows\runner\Release
        )
    
    - name: Create release archive
      run: |
        cd vpn_client/build/windows/runner/Release
        7z a -tzip ../../../../XVPN-Windows-${{ github.ref_name }}.zip .
    
    - name: Get release info
      id: release_info
      run: |
        $version = "${{ github.ref_name }}" -replace "^v", ""
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
        # Extract changelog for this version
        $changelog = ""
        if (Test-Path "CHANGELOG.md") {
          $content = Get-Content "CHANGELOG.md" -Raw
          $pattern = "## \[$version\].*?(?=## \[|\z)"
          if ($content -match $pattern) {
            $changelog = $matches[0]
          }
        }
        
        if ([string]::IsNullOrWhiteSpace($changelog)) {
          $changelog = "Release $version"
        }
        
        # Save changelog to file
        $changelog | Out-File -FilePath "release-notes.md" -Encoding UTF8
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: XVPN ${{ steps.release_info.outputs.version }}
        body_path: release-notes.md
        files: |
          vpn_client/XVPN-Windows-${{ github.ref_name }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
