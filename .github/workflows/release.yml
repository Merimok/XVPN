name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Install dependencies
      run: |
        cd vpn_client
        flutter pub get

    - name: Download sing-box and Wintun
      shell: bash
      run: |
        # Download sing-box
        VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | grep '"tag_name":' | cut -d '"' -f4)
        FILE="sing-box-${VERSION#v}-windows-amd64.exe"
        URL="https://github.com/SagerNet/sing-box/releases/download/${VERSION}/${FILE}"
        echo "Creating directory vpn_client/sing-box..."
        mkdir -p vpn_client/sing-box
        echo "Downloading sing-box from: $URL"
        curl -L "$URL" -o "vpn_client/sing-box/sing-box.exe"
        echo "Sing-box download completed. File size:"
        ls -la vpn_client/sing-box/sing-box.exe
        
        # Download Wintun
        echo "Downloading Wintun DLL..."
        curl -L "https://www.wintun.net/builds/wintun-0.14.1.zip" -o wintun.zip
        echo "Extracting Wintun..."
        unzip -q wintun.zip
        echo "Copying wintun.dll..."
        cp wintun/bin/amd64/wintun.dll vpn_client/sing-box/wintun.dll
        echo "Cleaning up..."
        rm -rf wintun.zip wintun
        echo "Wintun download completed. File size:"
        ls -la vpn_client/sing-box/wintun.dll
        rm -rf wintun.zip wintun
    
    - name: Run tests
      run: |
        cd vpn_client
        flutter test
    
    - name: Build Windows release
      run: |
        cd vpn_client
        flutter build windows --release
        
    - name: Copy dependencies to release folder
      shell: cmd
      run: |
        cd vpn_client
        echo "Checking if files exist before copying..."
        if exist sing-box\sing-box.exe (
          echo "Found sing-box.exe, copying..."
          copy sing-box\sing-box.exe build\windows\runner\Release\sing-box.exe
        ) else (
          echo "ERROR: sing-box.exe not found in sing-box folder"
          dir sing-box
          exit 1
        )
        if exist sing-box\wintun.dll (
          echo "Found wintun.dll, copying..."
          copy sing-box\wintun.dll build\windows\runner\Release\wintun.dll
        ) else (
          echo "ERROR: wintun.dll not found in sing-box folder"
          dir sing-box
          exit 1
        )
    
    - name: Create release archive
      run: |
        cd vpn_client/build/windows/runner/Release
        7z a -tzip ../../../../XVPN-Windows-${{ github.ref_name }}.zip .
    
    - name: Get release info
      id: release_info
      run: |
        $version = "${{ github.ref_name }}" -replace "^v", ""
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
        # Extract changelog for this version
        $changelog = ""
        if (Test-Path "CHANGELOG.md") {
          $content = Get-Content "CHANGELOG.md" -Raw
          $pattern = "## \[$version\].*?(?=## \[|\z)"
          if ($content -match $pattern) {
            $changelog = $matches[0]
          }
        }
        
        if ([string]::IsNullOrWhiteSpace($changelog)) {
          $changelog = "Release $version"
        }
        
        # Save changelog to file
        $changelog | Out-File -FilePath "release-notes.md" -Encoding UTF8
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: XVPN ${{ steps.release_info.outputs.version }}
        body_path: release-notes.md
        files: |
          vpn_client/XVPN-Windows-${{ github.ref_name }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
