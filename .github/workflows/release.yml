name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Install dependencies
      run: |
        cd vpn_client
        flutter pub get

    - name: Add Windows platform (if needed)
      shell: bash
      run: |
        cd vpn_client
        echo "=== ENSURING WINDOWS PLATFORM ==="
        echo "Checking Windows platform..."
        if [ ! -f "windows/CMakeLists.txt" ] || [ ! -d "windows/runner" ]; then
          echo "Windows platform incomplete, creating..."
          flutter create --platforms=windows .
        else
          echo "Windows platform exists, updating..."
          flutter create --platforms=windows .
        fi
        echo "Windows platform ready:"
        ls -la windows/

    - name: Download sing-box and Wintun
      shell: bash
      run: |
        # Download sing-box
        VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | grep '"tag_name":' | cut -d '"' -f4)
        FILE="sing-box-${VERSION#v}-windows-amd64.exe"
        URL="https://github.com/SagerNet/sing-box/releases/download/${VERSION}/${FILE}"
        echo "Creating directory vpn_client/sing-box..."
        mkdir -p vpn_client/sing-box
        echo "Downloading sing-box from: $URL"
        curl -L "$URL" -o "vpn_client/sing-box/sing-box.exe"
        echo "Sing-box download completed. File size:"
        ls -la vpn_client/sing-box/sing-box.exe
        
        # Download Wintun
        echo "Downloading Wintun DLL..."
        curl -L "https://www.wintun.net/builds/wintun-0.14.1.zip" -o wintun.zip
        echo "Extracting Wintun..."
        unzip -q wintun.zip
        echo "Copying wintun.dll..."
        cp wintun/bin/amd64/wintun.dll vpn_client/sing-box/wintun.dll
        echo "Cleaning up..."
        rm -rf wintun.zip wintun
        echo "Wintun download completed. File size:"
        ls -la vpn_client/sing-box/wintun.dll
        rm -rf wintun.zip wintun
    
    - name: Run tests
      run: |
        cd vpn_client
        flutter test
    
    - name: Build Windows release
      shell: bash
      run: |
        cd vpn_client
        echo "=== BUILDING FLUTTER WINDOWS APP ==="
        echo "Flutter version:"
        flutter --version
        echo "Building Windows release..."
        flutter build windows --release --verbose
        echo "Build completed. Checking output..."
        if [ -d "build/windows/runner/Release" ]; then
          echo "✓ Release directory exists"
          ls -la build/windows/runner/Release/
          if [ -f "build/windows/runner/Release/vpn_client.exe" ]; then
            echo "✓ vpn_client.exe created successfully!"
            ls -lh build/windows/runner/Release/vpn_client.exe
          else
            echo "✗ ERROR: vpn_client.exe not found!"
            echo "Contents of Release directory:"
            find build/windows/runner/Release/ -type f || echo "Directory empty or missing"
            exit 1
          fi
        else
          echo "✗ ERROR: Release directory not created!"
          echo "Build directory contents:"
          find build/ -type f || echo "Build directory empty or missing"
          exit 1
        fi
        
    - name: Verify build output and create directories
      shell: bash
      run: |
        cd vpn_client
        echo "=== RELEASE BUILD DIAGNOSTIC ==="
        echo "Current directory:"
        pwd
        echo "Listing vpn_client directory:"
        ls -la
        echo "Checking build structure:"
        if [ -d "build" ]; then
          echo "build exists"
          ls -la build/
          if [ -d "build/windows" ]; then
            echo "build/windows exists"  
            if [ -d "build/windows/runner" ]; then
              echo "build/windows/runner exists"
              ls -la build/windows/runner/
            fi
          fi
        fi
        echo "Checking dependencies:"
        if [ -d "sing-box" ]; then
          echo "sing-box directory exists"
          ls -la sing-box/
        fi
        
    - name: Copy dependencies to release folder
      shell: bash
      run: |
        cd vpn_client
        echo "=== COPYING DEPENDENCIES FOR RELEASE ==="
        echo "Creating complete directory structure..."
        mkdir -p build/windows/runner/Release
        
        echo "Verifying directory creation:"
        if [ -d "build/windows/runner/Release" ]; then
          echo "SUCCESS: Release directory created"
        else
          echo "ERROR: Failed to create Release directory"
          exit 1
        fi
        
        echo "Copying sing-box.exe..."
        if [ -f "sing-box/sing-box.exe" ]; then
          echo "Copying sing-box.exe..."
          cp -v sing-box/sing-box.exe build/windows/runner/Release/sing-box.exe
          if [ $? -eq 0 ]; then
            echo "SUCCESS: sing-box.exe copied"
          else
            echo "ERROR: Failed to copy sing-box.exe"
            exit 1
          fi
        else
          echo "ERROR: sing-box.exe not found"
          if [ -d "sing-box" ]; then
            ls -la sing-box/
          else
            echo "sing-box directory missing"
          fi
          exit 1
        fi
        
        echo "Copying wintun.dll..."
        if [ -f "sing-box/wintun.dll" ]; then
          echo "Copying wintun.dll..."
          cp -v sing-box/wintun.dll build/windows/runner/Release/wintun.dll
          if [ $? -eq 0 ]; then
            echo "SUCCESS: wintun.dll copied"
          else
            echo "ERROR: Failed to copy wintun.dll"
            exit 1
          fi
        else
          echo "ERROR: wintun.dll not found"
          if [ -d "sing-box" ]; then
            ls -la sing-box/
          fi
          exit 1
        fi
        
        echo "Final verification:"
        if [ -d "build/windows/runner/Release" ]; then
          echo "Release directory contents:"
          ls -la build/windows/runner/Release/
        fi
    
    - name: Create release archive
      shell: bash
      run: |
        cd vpn_client/build/windows/runner/Release
        # Use 7z or zip to create archive
        if command -v 7z >/dev/null 2>&1; then
          7z a -tzip ../../../../XVPN-Windows-${{ github.ref_name }}.zip .
        else
          # Fallback to zip command
          zip -r ../../../../XVPN-Windows-${{ github.ref_name }}.zip .
        fi
    
    - name: Get release info
      id: release_info
      shell: bash
      run: |
        version="${{ github.ref_name }}"
        version="${version#v}"  # Remove 'v' prefix
        echo "version=$version" >> $GITHUB_OUTPUT
        
        # Extract changelog for this version
        changelog=""
        if [ -f "CHANGELOG.md" ]; then
          # Try to extract changelog section for this version
          if grep -q "## \[$version\]" CHANGELOG.md; then
            changelog=$(sed -n "/## \[$version\]/,/## \[/p" CHANGELOG.md | sed '$d')
          fi
        fi
        
        if [ -z "$changelog" ]; then
          changelog="Release $version"
        fi
        
        # Save changelog to file
        echo "$changelog" > release-notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: XVPN ${{ steps.release_info.outputs.version }}
        body_path: release-notes.md
        files: |
          vpn_client/XVPN-Windows-${{ github.ref_name }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
